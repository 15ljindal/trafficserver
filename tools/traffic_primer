#!/bin/sh
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Simple script to fetch a URL through one proxy, and then PUSH that response (headers
# and body) to a set of hosts. The host:port defaults to localhost:80 for fetching
# the URL, but can be overriden with -h/-p.


# Print some help text
usage() {
    echo 'Usage: traffic_primer -u <url> [-h Host] [-p port] host1 host2 ...'
    exit 2
}

# Default values for command line options
url=""
host="localhost"
port="80"

# Parse command line arguments
PARGS=$(getopt u:h:p: $@)
[ $? != 0 ] && usage

set -- $PARGS
while true; do
    case "$1" in
        -u)
            url="$2"
            shift 2 ;;
        -h)
            host="$2"
            shift 2 ;;
        -p)
            port="$2"
            shift 2 ;;
        --)
            shift
            break ;;
        *)
            usage
            break
            ;;
    esac
done

[ "" == "$url" ] && usage

tmpfile=$(mktemp /tmp/pusher-XXXXXX)

# CLeanup just in case
trap "rm -f $tmpfile; exit 0" 0 1 2 3 15

# Fetch the URL through the proxy on localhost, and create the file for PUSH
curl -x ${host}:${port} -s -i -o ${tmpfile} $url

for h in $@; do
    curl -f -I -x ${h}:${port} -s -o /dev/null -H "Cache-Control: only-if-cached" $url > /dev/null
    if [ $? -gt 0 ]; then
        echo "PUSHing to $h..."
        curl -x ${h}:80 -s -o /dev/null -X PUSH --data-binary @${tmpfile} $url
    fi
done

rm -f ${tmpfile}
